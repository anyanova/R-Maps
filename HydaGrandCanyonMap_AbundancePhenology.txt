##Grand Canyon HYOS map!
##########################################################
library(maps)
library(mapdata)
library(maptools)
library(rgeos)
library(ggplot2)
library(lubridate)
library(sf)
library(tools)
library("rnaturalearth")
library("rnaturalearthdata")

#Import data and limit to 2015-2017 (make sure it has month!)
Bugs<-read.csv("HYOSgc2013to2020_28Oct2020.csv")
Bugs$HYcatchrate<-Bugs$Hydropsyche/Bugs$TimeElapsed
GCRM<-read.csv("C:/Users/ametcalfe/Desktop/GIS/GrandCanyon/GrandCanyonLatLongRM.csv")
colnames(Bugs)

#October 30th account for bad Somer Morris sample (RM changed from 109 to 209 in DB on 10/30/2020)
Bugs[Bugs$BarcodeID=="L09246",6]<-209

GCHY<-merge(Bugs,GCRM, by="RiverMile")
colnames(GCHY)
GCHY<-GCHY[,c(3,1,37,38,36,31:35)]

head(GCHY)



	
##MAKE MAP###############################################
###UPDATE FEB 2018##############
##Import Reachs and res shapefiles, states ###
##Import rivers and res shapefiles, states ###
Mainstem<-sf::st_read("C:/Users/ametcalfe/Desktop/GIS/GrandCanyon/RiverMileCenterline_UPDATED/RiverMileCenterline_UPDATED.shp")
Tribs<-sf::st_read("C:/Users/ametcalfe/Desktop/GIS/GrandCanyon/GC_tributaries/Tributaries_KM_Line_Dissolve.shp")
UBResShapefile<-sf::st_read("U:/LTres/LTres.shp")

all_states <- map_data("state")
AZ <- subset(all_states, region %in% "arizona")


##State layer using sf
states <- st_as_sf(map("state", plot = FALSE, fill = TRUE))
	states <- cbind(states, st_coordinates(st_centroid(states)))
	states$ID <- toTitleCase(states$ID)
	head(states)

#Labeled map of all states!
ggplot() +
    geom_sf(data = states, fill = "white") + 
    geom_text(data = states, aes(X, Y, label = ID), size = 5) 

#Narrow it down to N AZ
	+
#    coord_sf(xlim = c(-115, -109), ylim = c(35, 38), expand = FALSE)



#Scalebars

		createScaleBar <- function(lon,lat,distanceLon,distanceLat,
								   distanceLegend, dist.units = "km"){
			# First rectangle
			bottomRight <- gcDestination(lon = lon, lat = lat, bearing = 90, 
										 dist = distanceLon, dist.units = dist.units,
										 model = "WGS84")
			
			topLeft <- gcDestination(lon = lon, lat = lat, bearing = 0, 
									 dist = distanceLat, dist.units = dist.units, 
									 model = "WGS84")
			rectangle <- cbind(lon=c(lon, lon, bottomRight[1,"long"],
									 bottomRight[1,"long"], lon),
							   lat = c(lat, topLeft[1,"lat"], topLeft[1,"lat"],
									   lat, lat))
			rectangle <- data.frame(rectangle, stringsAsFactors = FALSE)
			
			# Second rectangle t right of the first rectangle
			bottomRight2 <- gcDestination(lon = lon, lat = lat, bearing = 90, 
										  dist = distanceLon*2, dist.units = dist.units,
										  model = "WGS84")
			rectangle2 <- cbind(lon = c(bottomRight[1,"long"], bottomRight[1,"long"],
										bottomRight2[1,"long"], bottomRight2[1,"long"],
										bottomRight[1,"long"]),
								lat=c(lat, topLeft[1,"lat"], topLeft[1,"lat"], 
									  lat, lat))
			rectangle2 <- data.frame(rectangle2, stringsAsFactors = FALSE)
			
			# Now let's deal with the text
			onTop <- gcDestination(lon = lon, lat = lat, bearing = 0, 
								   dist = distanceLegend, dist.units = dist.units, 
								   model = "WGS84")
			onTop2 <- onTop3 <- onTop
			onTop2[1,"long"] <- bottomRight[1,"long"]
			onTop3[1,"long"] <- bottomRight2[1,"long"]
			
			legend <- rbind(onTop, onTop2, onTop3)
			legend <- data.frame(cbind(legend, text = c(0, distanceLon, distanceLon*2)),
								 stringsAsFactors = FALSE, row.names = NULL)
			return(list(rectangle = rectangle, rectangle2 = rectangle2, 
						legend = legend))
		}

		scaleBar <- function(lon, lat, distanceLon, distanceLat, 
							 distanceLegend, dist.unit = "km", rec.fill = "white",
							 rec.colour = "black", rec2.fill = "black", 
							 rec2.colour = "black", legend.colour = "black", 
							 legend.size = 3, orientation = TRUE, arrow.length = 500,
							 arrow.distance = 300, arrow.North.size = 6){
			laScaleBar <- createScaleBar(lon = lon, lat = lat, 
										 distanceLon = distanceLon, 
										 distanceLat = distanceLat, 
										 distanceLegend = distanceLegend, 
										 dist.unit = dist.unit)
			# First rectangle
			rectangle1 <- geom_polygon(data = laScaleBar$rectangle, 
									   aes(x = lon, y = lat), fill = rec.fill, 
									   colour = rec.colour)
			
			# Second rectangle
			rectangle2 <- geom_polygon(data = laScaleBar$rectangle2, 
									   aes(x = lon, y = lat), fill = rec2.fill, 
									   colour = rec2.colour)
			
			# Legend
			scaleBarLegend <- annotate("text", label = paste(laScaleBar$legend[,"text"],
															 dist.unit, sep=""), 
									   x = laScaleBar$legend[,"long"], 
									   y = laScaleBar$legend[,"lat"], 
									   size = legend.size, 
									   colour = legend.colour, fontface="bold")
			
			res <- list(rectangle1, rectangle2, scaleBarLegend)
			
			if(orientation){# Add an arrow pointing North
				coordsArrow <- createOrientationArrow(scaleBar = laScaleBar, 
													  length = arrow.length, 
													  distance = arrow.distance,
													  dist.unit = dist.unit)
				arrow <- list(geom_segment(data = coordsArrow$res, 
										   aes(x = x, y = y, xend = xend, yend = yend)),
							  annotate("text", label = "N", 
									   x = coordsArrow$coordsN[1,"x"], 
									   y = coordsArrow$coordsN[1,"y"], 
									   size = arrow.North.size, colour = "black"))
				res <- c(res, arrow)
			}
			return(res)
		}
#

ggplot(AZ) + ggtitle("Hydropsyche sp.") + 
geom_polygon(data=AZ, aes(x=long, y=lat), colour="black", fill="white" ) +
geom_sf(data=Mainstem,colour="gray", cex=1.2) +
geom_sf(data=UBRes_df,colour="gray",fill="gray", cex=1.2)


##MAPPING!!!##
GCHYmap<-ggplot() + ggtitle("Hydropsyche sp.") +
    geom_sf(data = states, fill = "white") + 
	geom_sf(data=Mainstem,colour="gray", cex=1.2) +
	geom_sf(data=Tribs,colour="lightgray", cex=1.2) +
	geom_sf(data=UBRes_df,colour="gray",fill="gray", cex=1.2) +
	coord_sf(xlim = c(-115, -111), ylim = c(35.5, 37.5), expand = FALSE) +
	geom_point(data=GCHY[GCHY$HYcatchrate==0,],aes(x=Long,y=Lat, size=.5), color="black", pch=16) +
	geom_jitter(data=GCHY[GCHY$HYcatchrate>0,],aes(x=Long,y=Lat, size=HYcatchrate, fill=Season), pch=21, width=0.01, height=0.01, alpha=0.6)+
	scaleBar(lon = -113.5, lat = 42.25, distanceLon = 50, distanceLat = 10, distanceLegend = 25, dist.unit = "km", orientation = FALSE,legend.size=3) +
	scale_size_continuous(name=c("    "),
				breaks=c(.5,2,10,100,300),
				range = c(1,12), ##Fiddle here to change min and max size of points
				labels = c("0","1","10","100",">200"),
				guide = guide_legend(direction = "vertical", title.position = "top",
				override.aes = list(fill=c("black","white","white","white","white"),
				label.position="bottom", label.hjust = 0, label.vjust = 0.5))) 	
GCHYmap
#ggsave("GCHYmap.pdf", GCHYmap, height=12.9, width=10, units='in',dpi=800)
 	











	scale_size_continuous(name=c("    "),
				breaks=c(0,1,10,50,100,200,400),
				range = c(1,25), ##Fiddle here to change min and max size of points
				labels = c("0","1","10","50","100","200",">400"),
				guide = guide_legend(direction = "vertical", title.position = "top",
				override.aes = list(fill=c("grey","purple3","purple3","purple3","purple3","purple3","purple3"),
				label.position="bottom", label.hjust = 0, label.vjust = 0.5))) 
				
				
				
				+
	theme(legend.position=c(.19, .72), 
				legend.title=element_text(size="10",face="bold"),
				legend.background=element_rect(fill="transparent"),
				legend.key=element_rect(fill="transparent"))
		





geom_polygon( data=AZ, aes(x=long, y=lat, group=group),colour="black", fill="white" ) +
geom_path(data=UBRivers_df,aes(x=long,y=lat, group=group),colour="gray", cex=1.2) +
geom_polygon(data=UBRes_df,aes(x=long,y=lat, group=group),colour="gray",fill="gray", cex=1.2) +
coord_cartesian(xlim = c(-113.9,-107.35), ylim = c(42.5,35.9), expand = TRUE) +
theme(axis.text.y = element_blank(), axis.ticks.x = element_blank(),axis.ticks.y = element_blank(), axis.title = element_blank(),axis.text.x = element_blank(),) +
geom_jitter(data=Bugs[Bugs$Month=="1",],aes(x=Long,y=Lat, size=CatchRateAqua),fill="purple3", pch=21, width=0.03, height=0.03, alpha=0.6)+
geom_jitter(data=Bugs,aes(x=Long,y=Lat, size=CatchRateAqua),fill="red", alpha=0)+
scaleBar(lon = -113.5, lat = 42.25, distanceLon = 50, distanceLat = 10, distanceLegend = 25, dist.unit = "km", orientation = FALSE,legend.size=3) +
scale_size_continuous(name=c("    "),
			breaks=c(1,100,500,5000,20000),
			range = c(1,25), ##Fiddle here to change min and max size of points
			labels = c("1","100","500","5,000",">10,000"),
			guide = guide_legend(direction = "vertical", title.position = "top",
			override.aes = list(fill=c("purple3","purple3","purple3","purple3","purple3"),
			label.position="bottom", label.hjust = 0, label.vjust = 0.5))) +
theme(legend.position=c(.19, .72), 
			legend.title=element_text(size="10",face="bold"),
			legend.background=element_rect(fill="transparent"),
			legend.key=element_rect(fill="transparent"))
January

ggsave("1_UBphen_15to17_January.pdf", January, height=6.45, width=5, units='in',dpi=800)
 


